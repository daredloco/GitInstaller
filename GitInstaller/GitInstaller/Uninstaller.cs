using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace GitInstaller
{
	public class Uninstaller
	{
		public string location;
		public List<string> files = new List<string>();
		public List<string> directories = new List<string>();

		public Uninstaller(string loca)
		{
			location = loca;
		}

		public Uninstaller(string loca, string[] fs, string[] dirs)
		{
			location = loca;
			files.AddRange(fs);
			directories.AddRange(dirs);
		}

		/// <summary>
		/// Generates a gituninstaller.cfg file inside the installation directory
		/// </summary>
		public void GenerateFile()
		{
			string fname = Path.Combine(location, "gituninstaller.cfg");
			List<string> flines = new List<string>() { $"###{Settings.Project} Uninstaller###" };
			flines.Add("This is a file generated by GitInstaller, ");
			flines.Add("to use it either install a newer version of the software installed with it");
			flines.Add("or open the GitInstaller for this application, select this folder and press \"Uninstall\"");

			flines.Add("###FILES###");
			foreach (string f in files)
			{
				flines.Add(f);
			}

			flines.Add("###DIRECTORIES###");
			foreach (string d in directories)
			{
				flines.Add(d);
			}

			File.WriteAllLines(fname, flines.ToArray());
		}

		/// <summary>
		/// Uninstall the installation at the location. Won't work if it can't find a gituninstaller.cfg file!
		/// </summary>
		/// <param name="flocation">The location of the installation</param>
		/// <returns>True if uninstall was a success, else returns false</returns>
		public static bool DoUninstall(string flocation)
		{
			MainWindow.Instance.prog_loading.IsIndeterminate = true;
			flocation = Path.Combine(flocation, "gituninstaller.cfg");
			if (!File.Exists(flocation))
			{
				MainWindow.Instance.prog_loading.IsIndeterminate = false;
				MainWindow.Instance.WriteLog("Couldn't find gituninstaller.cfg, did you choose the right path?");
				return false;
			}

			MainWindow.Instance.WriteLog("Starting uninstall process");
			bool infiles = false;
			bool indirs = false;
			bool wassuccess = true;

			string[] flines = File.ReadAllLines(flocation);
			string firstline = flines[0];
			if(firstline.EndsWith("###") && firstline.StartsWith("###"))
			{
				firstline = firstline.TrimStart('#').TrimEnd('#').Replace(" Uninstaller", "");
				if (Settings.Project != firstline)
				{
					MainWindow.Instance.prog_loading.IsIndeterminate = false;
					MainWindow.Instance.WriteLog("This is the invalid installation for this project!");
					return false;
				}
			}
			else
			{
				MainWindow.Instance.prog_loading.IsIndeterminate = false;
				MainWindow.Instance.WriteLog("Cant check if this is the right directory because the gituninstaller.cfg is corrupted!");
				return false;
			}

			foreach(string fline in flines)
			{
				if(fline != "")
				{
					if (infiles && fline != "###FILES###" && fline != "###DIRECTORIES###")
					{
						try
						{
							if (!File.Exists(fline))
								throw new Exception("File \"" + fline + "\" does not exist");
							FileInfo fi = new FileInfo(fline);
							string folderpath = fi.Directory.FullName;
							File.Delete(fline);
							bool folderhasfiles = Directory.EnumerateFiles(folderpath).Any();
							if (!folderhasfiles)
								Directory.Delete(folderpath);
							MainWindow.Instance.WriteLog("File \"" + fline + "\" deleted!");
						}
						catch (Exception ex)
						{
							MainWindow.Instance.WriteLog("Couldn't delete file \"" + fline + "\" => " + ex.Message);
							wassuccess = false;
						}
					}
					else if (indirs && fline != "###FILES###" && fline != "###DIRECTORIES###")
					{
						try
						{
							if (!Directory.Exists(fline))
								throw new Exception("Directory \"" + fline + "\" does not exist");
							Directory.Delete(fline, true);
							MainWindow.Instance.WriteLog("Directory \"" + fline + "\" deleted!");
						}
						catch (Exception ex)
						{
							MainWindow.Instance.WriteLog("Couldn't delete directory \"" + fline + "\" => " + ex.Message);
							wassuccess = false;
						}
					}
					else if (fline == "###FILES###")
					{
						infiles = true;
						indirs = false;
					}
					else if (fline == "###DIRECTORIES###")
					{
						infiles = false;
						indirs = true;
					}

				}
			}
			File.Delete(flocation);
			MainWindow.Instance.prog_loading.IsIndeterminate = false;
			return wassuccess;
		}
	}
}
